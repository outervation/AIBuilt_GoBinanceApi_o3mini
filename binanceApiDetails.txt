
I'll provide a clean translation of the Binance WebSocket documentation, focusing on the key technical information:

# Web Socket Streams for Binance (2024-12-17)

## General WebSocket Information
- Base endpoints: 
  - wss://stream.binance.com:9443
  - wss://stream.binance.com:443
- Streams can be accessed as single raw streams or combined streams
- Raw streams format: /ws/<streamName>
- Combined streams format: /stream?streams=<streamName1>/<streamName2>/<streamName3>
- Combined stream events are wrapped as: {"stream":"<streamName>","data":<rawPayload>}
- All symbols must be lowercase
- Connections are valid for 24 hours only
- Server sends ping frame every 3 minutes - must respond with pong frame within 10 minutes
- Market data only streams available at wss://data-stream.binance.vision
- For microsecond timestamps, add timeUnit=MICROSECOND to URL

## WebSocket Limits
- 5 incoming messages per second limit (pings, pongs, and control messages)
- Maximum 1024 streams per connection
- 300 connections per 5 minutes per IP

## Stream Management
You can subscribe/unsubscribe to streams dynamically. The ID field can be:
- 64-bit signed integer
- Alphanumeric string (max 36 chars)
- null

### Example Subscribe Request:
```json
{
  "method": "SUBSCRIBE",
  "params": [
    "btcusdt@aggTrade",
    "btcusdt@depth"
  ],
  "id": 1
}
```

### Example Unsubscribe Request:
```json
{
  "method": "UNSUBSCRIBE", 
  "params": [
    "btcusdt@depth"
  ],
  "id": 312
}
```

### Available Streams Include:

1. Aggregate Trade Streams
2. Trade Streams
3. Kline/Candlestick Streams (UTC and timezone offset versions)
4. Individual Symbol Mini Ticker
5. All Market Mini Tickers
6. Individual Symbol Ticker
7. All Market Tickers
8. Individual Symbol Book Ticker
9. Average Price
10. Partial Book Depth
11. Diff Depth Stream

Each stream type has specific payload formats and update frequencies.

## Managing Local Order Books
Detailed steps are provided for maintaining a local order book:
1. Open WebSocket connection
2. Buffer events
3. Get depth snapshot
4. Validate sequence numbers
5. Apply updates in correct order
6. Maintain update IDs

Note: Depth snapshots are limited to 5000 price levels per side.

The documentation includes complete payload examples and error handling guidance for each stream type.

I'll provide the detailed specifications for those specific streams:

## 1. Trade Streams
Shows individual trades as they occur.

**Stream Name:** `<symbol>@trade`  
**Update Speed:** Real-time

**Example Payload:**
```json
{
  "e": "trade",         // Event type
  "E": 1672515782136,   // Event time
  "s": "BNBBTC",        // Symbol
  "t": 12345,           // Trade ID
  "p": "0.001",         // Price
  "q": "100",           // Quantity
  "T": 1672515782136,   // Trade time
  "m": true,            // Is buyer market maker?
  "M": true             // Ignore
}
```

## 2. Aggregate Trade Streams
Shows trades that have been aggregated by price level.

**Stream Name:** `<symbol>@aggTrade`  
**Update Speed:** Real-time

**Example Payload:**
```json
{
  "e": "aggTrade",      // Event type
  "E": 1672515782136,   // Event time
  "s": "BNBBTC",        // Symbol
  "a": 12345,           // Aggregate trade ID
  "p": "0.001",         // Price
  "q": "100",           // Quantity
  "f": 100,             // First trade ID
  "l": 105,             // Last trade ID
  "T": 1672515782136,   // Trade time
  "m": true,            // Is buyer market maker?
  "M": true             // Ignore
}
```

## 3. Individual Symbol Book Ticker
Streams best bid/ask prices and quantities for a symbol.

**Stream Name:** `<symbol>@bookTicker`  
**Update Speed:** Real-time

**Example Payload:**
```json
{
  "u": 400900217,     // Order book updateId
  "s": "BNBUSDT",     // Symbol
  "b": "25.35190000", // Best bid price
  "B": "31.21000000", // Best bid qty
  "a": "25.36520000", // Best ask price
  "A": "40.66000000"  // Best ask qty
}
```

## 4. Partial Book Depth Streams
Shows top bids and asks at specified depth.

**Stream Name:** `<symbol>@depth<levels>` or `<symbol>@depth<levels>@100ms`  
**Update Speed:** 1000ms or 100ms  
**Levels:** 5, 10, or 20

**Example Payload:**
```json
{
  "lastUpdateId": 160,
  "bids": [           // Bids to be updated
    [
      "0.0024",       // Price level
      "10"            // Quantity
    ]
  ],
  "asks": [           // Asks to be updated
    [
      "0.0026",       // Price level
      "100"           // Quantity
    ]
  ]
}
```

## 5. Diff. Depth Stream
Provides depth updates for order book maintenance.

**Stream Name:** `<symbol>@depth` or `<symbol>@depth@100ms`  
**Update Speed:** 1000ms or 100ms

**Example Payload:**
```json
{
  "e": "depthUpdate",     // Event type
  "E": 1672515782136,     // Event time
  "s": "BNBBTC",          // Symbol
  "U": 157,               // First update ID
  "u": 160,               // Final update ID
  "b": [                  // Bids to be updated
    [
      "0.0024",           // Price level
      "10"                // Quantity
    ]
  ],
  "a": [                  // Asks to be updated
    [
      "0.0026",           // Price level
      "100"               // Quantity
    ]
  ]
}
```

**Important Note for Depth Streams:**
For maintaining an accurate local order book:
1. First event's U should be compared with snapshot's lastUpdateId
2. Ignore any event where u is <= lastUpdateId of snapshot
3. Update local book by:
   - Adding new price levels
   - Updating quantities for existing levels
   - Removing levels when quantity is 0
4. Always validate update IDs to ensure sequence integrity

The depth snapshots have a limit of 5000 price levels per side. Price levels beyond this limit won't be visible unless they change.

Order Book Snapshot REST API

To reliably maintain an order book, Binance provides REST endpoints to fetch the initial book snapshot:

    Spot: GET https://api.binance.com/api/v3/depth?symbol=<SYMBOL>&limit=<N>
    USDT-M Futures: GET https://fapi.binance.com/fapi/v1/depth?symbol=<SYMBOL>&limit=<N>
    Coin-M Futures: GET https://dapi.binance.com/dapi/v1/depth?symbol=<SYMBOL>&limit=<N>

These endpoints return the current order book up to N levels (N can be 5, 10, 20, 50, 100, 500, 1000, or 5000 depending on the market).

The response JSON looks like:

{
  "lastUpdateId": 160,
  "bids": [
    ["0.0024", "10"],    // price, quantity
    ... up to N bids
  ],
  "asks": [
    ["0.0026", "100"],
    ... up to N asks
  ]
}

For example, for spot BNBBTC with limit=5000, you’d get up to 5000 bids and 5000 asks, and a lastUpdateId​. The lastUpdateId is crucial: it represents the state of the order book at that snapshot. Any diff stream updates earlier than or up to this ID are already reflected in the snapshot and should be discarded.

Maintaining a Local Order Book (Combining WS + REST)

Binance’s documentation outlines a specific sequence to properly maintain an order book locally with WS updates. The general algorithm is:

    Connect to the Depth WebSocket stream. For example, for spot: wss://stream.binance.com:9443/ws/BNBBTC@depth (or @depth@100ms for faster updates). For futures: wss://fstream.binance.com/stream?streams=btcusdt@depth (this could also be a combined stream URL). Begin receiving depth update events. Buffer these events (do not apply them yet).
    Get an initial depth snapshot via REST. For spot, GET .../api/v3/depth?symbol=BNBBTC&limit=5000; for futures, .../fapi/v1/depth?symbol=BTCUSDT&limit=1000. This returns lastUpdateId and lists of bids/asks.
    Discard outdated WS events. Let lastUpdateId = the snapshot’s last update ID. Drop any buffered websocket event where the event’s u (final update ID) <= lastUpdateId. Those events are already included in the snapshot.
    Ensure sequence continuity. The first websocket event after the snapshot should have U (first update ID in that event) <= lastUpdateId+1 and u >= lastUpdateId+1. In other words, the snapshot’s ID should fall between U and u of the event. If not, it means you missed events and need to get a new snapshot and start over.
    Apply remaining buffered events to the snapshot. Update your local order book using the bids and asks from each event (in order). For each price in the event:
        If the quantity (q) is 0: remove that price level from your book (if present)​
        developers.binance.com
        .
        If q is > 0: update/add that price level to the new quantity (this is an absolute quantity, not a delta)​
        developers.binance.com
        .
    Continue to process new events in real-time. For each new event from the stream, apply the updates as in step 5. Also, verify the continuity: each event’s pu (previous update ID) should equal the last event’s u that you processed. If you ever find a gap (i.e., event.pu != last_seen_update_id), you should resync by going back to step 2 (get a new snapshot).
    Book ticker stream (optional): If only the best bid/ask is needed, you can use the <symbol>@bookTicker stream which directly gives you the current best prices without maintaining the full book. But for full order depth, you must use the diff stream + snapshot as above.

